PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
BASE <http://hl7.org/fhir/shape/>


start=@<MolecularSequence> AND {fhir:nodeRole [fhir:treeRoot]}


# Representation of a molecular sequence
<MolecularSequence> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:MolecularSequence];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<OneOrMore_Identifier>?;  # Unique ID for this particular 
                                            # sequence 
    fhir:type @<code> AND
    	{fhir:value @fhirvs:sequence-type}?;  # aa | dna | rna
    fhir:patient @<Reference> AND {fhir:link 
    			@<Patient> }?;  # Patient this sequence is 
                                            # associated too 
    fhir:specimen @<Reference> AND {fhir:link 
    			@<Specimen> }?;  # Specimen used for sequencing
    fhir:device @<Reference> AND {fhir:link 
    			@<Device> }?;  # The method for sequencing
    fhir:performer @<Reference> AND {fhir:link 
    			@<Organization> }?;  # Who should be responsible for test 
                                            # result 
    fhir:literal @<string>?;                # Sequence that was observed
    fhir:formatted @<OneOrMore_Attachment>?;  # Embedded file or a link (URL) 
                                            # which contains content to 
                                            # represent the sequence 
    fhir:relative @<OneOrMore_BackboneElement>?;  # A sequence defined relative to 
                                            # another sequence 
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# # Constraint UniqueKey:msq-6
# Human readable:Have and only have one of the following elements in referenceSeq : 1. referenceSequenceAssembly ; 2 referenceSequence
#
# Constraint: (referenceSequenceAssembly.count()+referenceSequenceCodeableConcept.count()+ referenceSequenceReference.count()+ referenceSequenceString.count()) = 1
# ShEx:
#
#(   count  ( fhir:referenceSequenceAssembly )  Plus     count  ( fhir:referenceSequenceCodeableConcept )  Plus     count  ( fhir:referenceSequenceReference )  Plus     count  ( fhir:referenceSequenceString )) { fhir:v [1] } 
{}

) AND (

# Constraint UniqueKey:msq-5
# Human readable:Both referenceSequenceAssembly and chromosome must be both contained if either one of them is contained

# Constraint: (chromosome.empty() and referenceSequenceAssembly.empty()) or (chromosome.exists() and referenceSequenceAssembly.exists())
# ShEx:

( NOT { fhir:chromosome {fhir:v .} }  AND  NOT { fhir:referenceSequenceAssembly {fhir:v .} } ) OR ({fhir:chromosome . AND {fhir:referenceSequenceAssembly .}})

)
 

# A sequence used as reference
<MolecularSequence.relative.reference> EXTENDS @<BackboneElement> CLOSED {   
    fhir:referenceSequenceAssembly @<CodeableConcept>?;  # The reference assembly used for 
                                            # reference, e.g. GRCh38 
    fhir:chromosome @<CodeableConcept>?;    # Chromosome Identifier
    fhir:referenceSequence (@<CodeableConcept>  OR 
    			@<string>  OR 
    			(@<Reference>  AND {fhir:link @<MolecularSequence> }) )  AND { rdf:type IRI } ?;  # The reference sequence that 
                                            # represents the starting sequence 
    fhir:windowStart @<integer>?;           # Start position of the window on 
                                            # the  reference sequence 
    fhir:windowEnd @<integer>?;             # End position of the window on the 
                                            # reference sequence 
    fhir:orientation @<code> AND
    	{fhir:value @fhirvs:orientation-type}?;  # sense | antisense
    fhir:strand @<code> AND
    	{fhir:value @fhirvs:strand-type}?;  # watson | crick
}  

# A sequence defined relative to another sequence
<MolecularSequence.relative> EXTENDS @<BackboneElement> CLOSED {   
    fhir:coordinateSystem @<CodeableConcept>;  # Ways of identifying nucleotides or 
                                            # amino acids within a sequence 
    fhir:reference @<BackboneElement>?;     # A sequence used as reference
    fhir:edit @<OneOrMore_BackboneElement>?;  # Changes in sequence from the 
                                            # reference 
}  

# Changes in sequence from the reference
<MolecularSequence.relative.edit> EXTENDS @<BackboneElement> CLOSED {   
    fhir:start @<integer>?;                 # Start position of the edit on the 
                                            # reference sequence 
    fhir:end @<integer>?;                   # End position of the edit on the 
                                            # reference sequence 
    fhir:observedAllele @<string>?;         # Allele that was observed
    fhir:referenceAllele @<string>?;        # Allele in the reference sequence
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Identifier> CLOSED {
    rdf:first @<Identifier>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Identifier> 
}

<OneOrMore_Attachment> CLOSED {
    rdf:first @<Attachment>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Attachment> 
}

<OneOrMore_BackboneElement> CLOSED {
    rdf:first @<BackboneElement>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_BackboneElement> 
}

#---------------------- Value Sets ------------------------

# Type for orientation.
fhirvs:orientation-type ["sense" "antisense"]

# Type if a sequence -- DNA, RNA, or amino acid sequence.
fhirvs:sequence-type ["aa" "dna" "rna"]

# Type for strand.
fhirvs:strand-type ["watson" "crick"]
