PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
BASE <http://hl7.org/fhir/shape/>


start=@<Bundle> AND {fhir:nodeRole [fhir:treeRoot]}


# Contains a collection of resources
<Bundle> EXTENDS @<Resource> CLOSED {   

    a [fhir:Bundle];
    fhir:nodeRole [fhir:treeRoot]?;
    fhir:identifier @<Identifier>?;         # Persistent identifier for the 
                                            # bundle 
    fhir:type @<code> AND
    	{fhir:value @fhirvs:bundle-type};  # document | message | transaction | 
                                            # transaction-response | batch | 
                                            # batch-response | history | 
                                            # searchset | collection | 
                                            # subscription-notification 
    fhir:timestamp @<instant>?;             # When the bundle was assembled
    fhir:total @<unsignedInt>?;             # If search, the total number of 
                                            # matches 
    fhir:link @<OneOrMore_BackboneElement>?;  # Links related to this Bundle
    fhir:entry @<OneOrMore_BackboneElement>?;  # Entry in the bundle - will have a 
                                            # resource or information 
    fhir:signature @<Signature>?;           # Digital Signature
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# Unmapped construct found: where
# Unmapped construct found: select
# Unmapped construct found: Concatenate
# # Constraint UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
#
# Constraint: (type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  }) OR    isDistinct  ( fhir:entry.  where  (fullUrl .).  select  (fullUrl  Concatenate  resource.meta.versionId) )
{}

) AND (

# Constraint UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value

# Constraint: type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({fhir:identifier.system . AND {fhir:identifier.value .}})

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3
# Human readable:entry.request mandatory for batch/transaction/history, allowed for subscription-notification, otherwise prohibited
#
# Constraint: entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:
#
#{fhir:entry.  all  (request . { fhir:v ['false'.type { fhir:v ['batch'] }  OR 'false'.type { fhir:v ['transaction'] }  OR 'false'.type { fhir:v ['history'] } ] } ) OR ({ fhir:type { fhir:v ['subscription-notification'] }  })}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-4
# Human readable:entry.response mandatory for batch-response/transaction-response/history, allowed for subscription-notification, otherwise prohibited
#
# Constraint: entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:
#
#{fhir:entry.  all  (response . { fhir:v ['false'.type { fhir:v ['batch-response'] }  OR 'false'.type { fhir:v ['transaction-response'] }  OR 'false'.type { fhir:v ['history'] } ] } ) OR ({ fhir:type { fhir:v ['subscription-notification'] }  })}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
#
# Constraint: type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:
#
#({ fhir:type { fhir:v ['subscription-notification'] }  }) AND    first  ( fhir:entry ).resource { a [SubscriptionStatus] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
#
# Constraint: type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:
#
#({ fhir:type { fhir:v ['message'] }  }) AND    first  ( fhir:entry ).resource { a [MessageHeader] } 
{}

) AND (

# Constraint UniqueKey:bdl-1
# Human readable:total only when a search or history

# Constraint: total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint UniqueKey:bdl-2
# Human readable:entry.search only when a search

# Constraint: entry.search.empty() or (type = 'searchset')
# ShEx:

 NOT { fhir:entry.search {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  })

) AND (

# Constraint UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history

# Constraint: type = 'history' implies entry.request.method != 'PATCH'
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) AND ({fhir:entry.request.method [fhir:v  . -'PATCH'] })

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
#
# Constraint: type = 'document' implies entry.first().resource.is(Composition)
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  }) AND    first  ( fhir:entry ).resource { a [Composition] } 
{}

) AND (

# Constraint UniqueKey:bdl-10
# Human readable:A document must have a date

# Constraint: type = 'document' implies (timestamp.hasValue())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({fhir:timestamp .})

) AND (

# Constraint UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference

# Constraint: fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:

{fhir:fullUrl . AND  NOT { fhir:fullUrl { fhir:v ['/_history/'] }  }}

) AND (

# Constraint UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response

# Constraint: resource.exists() or request.exists() or response.exists()
# ShEx:

{fhir:resource . OR {fhir:request . OR {fhir:response .}}}

)
 

# Results of execution (transaction/batch/history)
<Bundle.entry.response> EXTENDS @<BackboneElement> CLOSED {   
    fhir:status @<string>;                  # Status response code (text 
                                            # optional) 
    fhir:location @<uri>?;                  # The location (if the operation 
                                            # returns a location) 
    fhir:etag @<string>?;                   # The Etag for the resource (if 
                                            # relevant) 
    fhir:lastModified @<instant>?;          # Server's date time modified
    fhir:outcome @<Resource>?;              # OperationOutcome with hints and 
                                            # warnings (for batch/transaction) 
}  

# Additional execution information (transaction/batch/history)
<Bundle.entry.request> EXTENDS @<BackboneElement> CLOSED {   
    fhir:method @<code> AND
    	{fhir:value @fhirvs:http-verb};  # GET | HEAD | POST | PUT | DELETE | 
                                            # PATCH 
    fhir:url @<uri>;                        # URL for HTTP equivalent of this 
                                            # entry 
    fhir:ifNoneMatch @<string>?;            # For managing cache currency
    fhir:ifModifiedSince @<instant>?;       # For managing cache currency
    fhir:ifMatch @<string>?;                # For managing update contention
    fhir:ifNoneExist @<string>?;            # For conditional creates
}  

# Links related to this Bundle
<Bundle.link> EXTENDS @<BackboneElement> CLOSED {   
    fhir:relation @<string>;                # See 
                                            # http://www.iana.org/assignments/-
                                            # link-relations/link-relations.xh-
                                            # tml#link-relations-1 
    fhir:url @<uri>;                        # Reference details for the link
}  

# Entry in the bundle - will have a resource or information
<Bundle.entry> EXTENDS @<BackboneElement> CLOSED {   
    fhir:link @<OneOrMore_Bundle.link>?;    # Links related to this entry
    fhir:fullUrl @<uri>?;                   # URI for resource (Absolute URL 
                                            # server address or URI for 
                                            # UUID/OID) 
    fhir:resource @<Resource>?;             # A resource in the bundle
    fhir:search @<BackboneElement>?;        # Search related information
    fhir:request @<BackboneElement>?;       # Additional execution information 
                                            # (transaction/batch/history) 
    fhir:response @<BackboneElement>?;      # Results of execution 
                                            # (transaction/batch/history) 
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# Unmapped construct found: where
# Unmapped construct found: select
# Unmapped construct found: Concatenate
# # Constraint UniqueKey:bdl-7
# Human readable:FullUrl must be unique in a bundle, or else entries with the same fullUrl must have different meta.versionId (except in history bundles)
#
# Constraint: (type = 'history') or entry.where(fullUrl.exists()).select(fullUrl&resource.meta.versionId).isDistinct()
# ShEx:
#
#({ fhir:type { fhir:v ['history'] }  }) OR    isDistinct  ( fhir:entry.  where  (fullUrl .).  select  (fullUrl  Concatenate  resource.meta.versionId) )
{}

) AND (

# Constraint UniqueKey:bdl-9
# Human readable:A document must have an identifier with a system and a value

# Constraint: type = 'document' implies (identifier.system.exists() and identifier.value.exists())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({fhir:identifier.system . AND {fhir:identifier.value .}})

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-3
# Human readable:entry.request mandatory for batch/transaction/history, allowed for subscription-notification, otherwise prohibited
#
# Constraint: entry.all(request.exists() = (%resource.type = 'batch' or %resource.type = 'transaction' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:
#
#{fhir:entry.  all  (request . { fhir:v ['false'.type { fhir:v ['batch'] }  OR 'false'.type { fhir:v ['transaction'] }  OR 'false'.type { fhir:v ['history'] } ] } ) OR ({ fhir:type { fhir:v ['subscription-notification'] }  })}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: all
# # Constraint UniqueKey:bdl-4
# Human readable:entry.response mandatory for batch-response/transaction-response/history, allowed for subscription-notification, otherwise prohibited
#
# Constraint: entry.all(response.exists() = (%resource.type = 'batch-response' or %resource.type = 'transaction-response' or %resource.type = 'history')) or (type='subscription-notification')
# ShEx:
#
#{fhir:entry.  all  (response . { fhir:v ['false'.type { fhir:v ['batch-response'] }  OR 'false'.type { fhir:v ['transaction-response'] }  OR 'false'.type { fhir:v ['history'] } ] } ) OR ({ fhir:type { fhir:v ['subscription-notification'] }  })}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-13
# Human readable:A subscription-notification must have a SubscriptionStatus as the first resource
#
# Constraint: type = 'subscription-notification' implies entry.first().resource.is(SubscriptionStatus)
# ShEx:
#
#({ fhir:type { fhir:v ['subscription-notification'] }  }) AND    first  ( fhir:entry ).resource { a [SubscriptionStatus] } 
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-12
# Human readable:A message must have a MessageHeader as the first resource
#
# Constraint: type = 'message' implies entry.first().resource.is(MessageHeader)
# ShEx:
#
#({ fhir:type { fhir:v ['message'] }  }) AND    first  ( fhir:entry ).resource { a [MessageHeader] } 
{}

) AND (

# Constraint UniqueKey:bdl-1
# Human readable:total only when a search or history

# Constraint: total.empty() or (type = 'searchset') or (type = 'history')
# ShEx:

 NOT { fhir:total {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  }) OR ({ fhir:type { fhir:v ['history'] }  })

) AND (

# Constraint UniqueKey:bdl-2
# Human readable:entry.search only when a search

# Constraint: entry.search.empty() or (type = 'searchset')
# ShEx:

 NOT { fhir:entry.search {fhir:v .} }  OR ({ fhir:type { fhir:v ['searchset'] }  })

) AND (

# Constraint UniqueKey:bdl-14
# Human readable:entry.request.method PATCH not allowed for history

# Constraint: type = 'history' implies entry.request.method != 'PATCH'
# ShEx:

({ fhir:type { fhir:v ['history'] }  }) AND ({fhir:entry.request.method [fhir:v  . -'PATCH'] })

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: first
# # Constraint UniqueKey:bdl-11
# Human readable:A document must have a Composition as the first resource
#
# Constraint: type = 'document' implies entry.first().resource.is(Composition)
# ShEx:
#
#({ fhir:type { fhir:v ['document'] }  }) AND    first  ( fhir:entry ).resource { a [Composition] } 
{}

) AND (

# Constraint UniqueKey:bdl-10
# Human readable:A document must have a date

# Constraint: type = 'document' implies (timestamp.hasValue())
# ShEx:

({ fhir:type { fhir:v ['document'] }  }) AND ({fhir:timestamp .})

) AND (

# Constraint UniqueKey:bdl-8
# Human readable:fullUrl cannot be a version specific reference

# Constraint: fullUrl.exists() implies fullUrl.contains('/_history/').not()
# ShEx:

{fhir:fullUrl . AND  NOT { fhir:fullUrl { fhir:v ['/_history/'] }  }}

) AND (

# Constraint UniqueKey:bdl-5
# Human readable:must be a resource unless there's a request or response

# Constraint: resource.exists() or request.exists() or response.exists()
# ShEx:

{fhir:resource . OR {fhir:request . OR {fhir:response .}}}

)
 

# Search related information
<Bundle.entry.search> EXTENDS @<BackboneElement> CLOSED {   
    fhir:mode @<code> AND
    	{fhir:value @fhirvs:search-entry-mode}?;  # match | include | outcome - why 
                                            # this is in the result set 
    fhir:score @<decimal>?;                 # Search ranking (between 0 and 1)
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_BackboneElement> CLOSED {
    rdf:first @<BackboneElement>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_BackboneElement> 
}

<OneOrMore_Bundle.link> CLOSED {
    rdf:first @<Bundle.link>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Bundle.link> 
}

#---------------------- Value Sets ------------------------

# Why an entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
fhirvs:search-entry-mode ["match" "include" "outcome"]

# HTTP verbs (in the HTTP command line). See [HTTP rfc](https://tools.ietf.org/html/rfc7231) for details.
fhirvs:http-verb ["GET" "HEAD" "POST" "PUT" "DELETE" "PATCH"]

# Indicates the purpose of a bundle - how it is intended to be used.
fhirvs:bundle-type ["document" "message" "transaction" "transaction-response" "batch" "batch-response" "history" "searchset" "collection" "subscription-notification"]
