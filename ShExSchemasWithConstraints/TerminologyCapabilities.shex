PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 
BASE <http://hl7.org/fhir/shape/>

IMPORT <uri.shex>
IMPORT <url.shex>
IMPORT <code.shex>
IMPORT <string.shex>
IMPORT <boolean.shex>
IMPORT <dateTime.shex>
IMPORT <markdown.shex>
IMPORT <canonical.shex>
IMPORT <DomainResource.shex>
IMPORT <BackboneElement.shex>


start=@<TerminologyCapabilities> AND {fhir:nodeRole [fhir:treeRoot]}

# A statement of system capabilities
<TerminologyCapabilities> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:TerminologyCapabilities]?;
    fhir:nodeRole [fhir:treeRoot]?;

    fhir:url @<uri>?;                       # Canonical identifier for this 
                                            # terminology capabilities, 
                                            # represented as a URI (globally 
                                            # unique) 
    fhir:identifier @<OneOrMore_Identifier>?;  # Additional identifier for the 
                                            # terminology capabilities 
    fhir:version @<string>?;                # Business version of the 
                                            # terminology capabilities 
    fhir:name @<string>?;                   # Name for this terminology 
                                            # capabilities (computer friendly) 
    fhir:title @<string>?;                  # Name for this terminology 
                                            # capabilities (human friendly) 
    fhir:status @<code> AND
    	{fhir:v @fhirvs:publication-status};  # draft | active | retired | unknown
    fhir:experimental @<boolean>?;          # For testing purposes, not real 
                                            # usage 
    fhir:date @<dateTime>;                  # Date last changed
    fhir:publisher @<string>?;              # Name of the publisher/steward 
                                            # (organization or individual) 
    fhir:contact @<OneOrMore_ContactDetail>?;  # Contact details for the publisher
    fhir:description @<markdown>?;          # Natural language description of 
                                            # the terminology capabilities 
    fhir:useContext @<OneOrMore_UsageContext>?;  # The context that the content is 
                                            # intended to support 
    fhir:jurisdiction @<OneOrMore_CodeableConcept>?;  # Intended jurisdiction for 
                                            # terminology capabilities (if 
                                            # applicable) 
    fhir:purpose @<markdown>?;              # Why this terminology capabilities 
                                            # is defined 
    fhir:copyright @<markdown>?;            # Use and/or publishing restrictions
    fhir:kind @<code> AND
    	{fhir:v @fhirvs:capability-statement-kind};  # instance | capability | 
                                            # requirements 
    fhir:software @<TerminologyCapabilities.software>?;  # Software that is covered by this 
                                            # terminology capability statement 
    fhir:implementation @<TerminologyCapabilities.implementation>?;  # If this describes a specific 
                                            # instance 
    fhir:lockedDate @<boolean>?;            # Whether lockedDate is supported
    fhir:codeSystem @<OneOrMore_TerminologyCapabilities.codeSystem>?;  # A code system supported by the 
                                            # server 
    fhir:expansion @<TerminologyCapabilities.expansion>?;  # Information about the 
                                            # [ValueSet/$expand](valueset-oper-
                                            # ation-expand.html) operation 
    fhir:codeSearch @<code> AND
    	{fhir:v @fhirvs:code-search-support}?;  # in-compose | in-expansion | 
                                            # in-compose-or-expansion 
    fhir:validateCode @<TerminologyCapabilities.validateCode>?;  # Information about the 
                                            # [ValueSet/$validate-code](values-
                                            # et-operation-validate-code.html) 
                                            # operation 
    fhir:translation @<TerminologyCapabilities.translation>?;  # Information about the 
                                            # [ConceptMap/$translate](conceptm-
                                            # ap-operation-translate.html) 
                                            # operation 
    fhir:closure @<TerminologyCapabilities.closure>?;  # Information about the 
                                            # [ConceptMap/$closure](conceptmap-
                                            # -operation-closure.html) operation 
} AND (

# Constraint UniqueKey:cnl-1
# Human readable:URL should not contain | or # - these characters make processing canonical references problematic

# Constraint: url.matches('([^|#])*')
# ShEx:

{fhir:url { fhir:v /'([^|#])*'/ } }

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:cnl-0
# Human readable:Name should be usable as an identifier for the module by machine processing applications such as code generation
#
# Constraint: name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){1,254}')
# ShEx:
#
#{fhir:name .  Implies  {fhir:name { fhir:v /'[A-Z]([A-Za-z0-9_]){1,254}'/ } }}
{}

) AND (

# Constraint UniqueKey:tcp-3
# Human readable:If kind = instance, implementation must be present and software may be present

# Constraint: (kind != 'instance') or implementation.exists()
# ShEx:

({ fhir:kind [fhir:v  . -'instance']  }) OR {fhir:implementation .}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# # Constraint UniqueKey:tcp-2
# Human readable:A Terminology Capability statement SHALL have at least one of description, software, or implementation element
#
# Constraint: (description.count() + software.count() + implementation.count()) > 0
# ShEx:
#
#(   count  ( fhir:description )  Plus     count  ( fhir:software )  Plus     count  ( fhir:implementation )) { fhir:v MinExclusive 0 } 
{}

) AND (

# Constraint UniqueKey:tcp-5
# Human readable:If kind = requirements, implementation and software must be absent

# Constraint: (kind!='requirements') or (implementation.exists().not() and software.exists().not())
# ShEx:

({ fhir:kind [fhir:v  . -'requirements']  }) OR ( NOT { fhir:implementation . } AND  NOT { fhir:software . })

) AND (

# Constraint UniqueKey:tcp-4
# Human readable:If kind = capability, implementation must be absent, software must be present

# Constraint: (kind != 'capability') or (implementation.exists().not() and software.exists())
# ShEx:

({ fhir:kind [fhir:v  . -'capability']  }) OR ( NOT { fhir:implementation . } AND {fhir:software .})

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# # Constraint UniqueKey:tcp-6
# Human readable:Each instance of the codeSystem element must represent a distinct code system.
#
# Constraint: codeSystem.uri.isDistinct()
# ShEx:
#
#   isDistinct  ( fhir:codeSystem.uri )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:tcp-1
# Human readable:If there is more than one version, a version code must be defined
#
# Constraint: version.count() > 1 implies version.all(code.exists())
# ShEx:
#
#(   count  ( fhir:version ) { fhir:v MinExclusive 1 } )  Implies  {fhir:version.  all  (code .)}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# # Constraint UniqueKey:tcp-7
# Human readable:Each version.code element must be distinct for a particular code system.
#
# Constraint: version.code.isDistinct()
# ShEx:
#
#   isDistinct  ( fhir:version.code )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: where
# # Constraint UniqueKey:tcp-8
# Human readable:A codeSystem element instance may have at most one version.isDefault element with a value of 'true'.
#
# Constraint: version.where(isDefault = true).count() <= 1
# ShEx:
#
#   count  ( fhir:version.  where  (isDefault { fhir:v [true] } ) ) { fhir:v MaxInclusive 1 } 
{}

)
 

# Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
<TerminologyCapabilities.validateCode> EXTENDS @<BackboneElement> CLOSED {   
    fhir:translations @<boolean>;           # Whether translations are validated
}  

# Supported expansion parameter
<TerminologyCapabilities.expansion.parameter> EXTENDS @<BackboneElement> CLOSED {   
    fhir:name @<code>;                      # Name of the supported expansion 
                                            # parameter 
    fhir:documentation @<string>?;          # Description of support for 
                                            # parameter 
}  

# Software that is covered by this terminology capability statement
<TerminologyCapabilities.software> EXTENDS @<BackboneElement> CLOSED {   
    fhir:name @<string>;                    # A name the software is known by
    fhir:version @<string>?;                # Version covered by this statement
}  

# Information about the [ConceptMap/$closure](conceptmap-operation-closure.html) operation
<TerminologyCapabilities.closure> EXTENDS @<BackboneElement> CLOSED {   
    fhir:translation @<boolean>?;           # If cross-system closure is 
                                            # supported 
}  

# Filter Properties supported
<TerminologyCapabilities.codeSystem.version.filter> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<code>;                      # Code of the property supported
    fhir:op @<OneOrMore_code>;              # Operations supported for the 
                                            # property 
}  

# Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation
<TerminologyCapabilities.translation> EXTENDS @<BackboneElement> CLOSED {   
    fhir:needsMap @<boolean>;               # Whether the client must identify 
                                            # the map 
}  

# If this describes a specific instance
<TerminologyCapabilities.implementation> EXTENDS @<BackboneElement> CLOSED {   
    fhir:description @<string>;             # Describes this specific instance
    fhir:url @<url>?;                       # Base URL for the implementation
}  

# Version of Code System supported
<TerminologyCapabilities.codeSystem.version> EXTENDS @<BackboneElement> CLOSED {   
    fhir:code @<string>?;                   # Version identifier for this version
    fhir:isDefault @<boolean>?;             # If this is the default version for 
                                            # this code system 
    fhir:compositional @<boolean>?;         # If compositional grammar is 
                                            # supported 
    fhir:language @<OneOrMore_code> AND
    	{fhir:v @fhirvs:languages}?;  # Language Displays supported
    fhir:filter @<OneOrMore_TerminologyCapabilities.codeSystem.version.filter>?;  # Filter Properties supported
    fhir:property @<OneOrMore_code>?;       # Properties supported for $lookup
}  

# A code system supported by the server
<TerminologyCapabilities.codeSystem> EXTENDS @<BackboneElement> CLOSED {   
    fhir:uri @<canonical>?;                 # Canonical identifier for the code 
                                            # system, represented as a URI 
    fhir:version @<OneOrMore_TerminologyCapabilities.codeSystem.version>?;  # Version of Code System supported
    fhir:content @<code> AND
    	{fhir:v @fhirvs:codesystem-content-mode};  # not-present | example | fragment | 
                                            # complete | supplement 
    fhir:subsumption @<boolean>?;           # Whether subsumption is supported
} AND (

# Constraint UniqueKey:cnl-1
# Human readable:URL should not contain | or # - these characters make processing canonical references problematic

# Constraint: url.matches('([^|#])*')
# ShEx:

{fhir:url { fhir:v /'([^|#])*'/ } }

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: Implies
# # Constraint UniqueKey:cnl-0
# Human readable:Name should be usable as an identifier for the module by machine processing applications such as code generation
#
# Constraint: name.exists() implies name.matches('[A-Z]([A-Za-z0-9_]){1,254}')
# ShEx:
#
#{fhir:name .  Implies  {fhir:name { fhir:v /'[A-Z]([A-Za-z0-9_]){1,254}'/ } }}
{}

) AND (

# Constraint UniqueKey:tcp-3
# Human readable:If kind = instance, implementation must be present and software may be present

# Constraint: (kind != 'instance') or implementation.exists()
# ShEx:

({ fhir:kind [fhir:v  . -'instance']  }) OR {fhir:implementation .}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# # Constraint UniqueKey:tcp-2
# Human readable:A Terminology Capability statement SHALL have at least one of description, software, or implementation element
#
# Constraint: (description.count() + software.count() + implementation.count()) > 0
# ShEx:
#
#(   count  ( fhir:description )  Plus     count  ( fhir:software )  Plus     count  ( fhir:implementation )) { fhir:v MinExclusive 0 } 
{}

) AND (

# Constraint UniqueKey:tcp-5
# Human readable:If kind = requirements, implementation and software must be absent

# Constraint: (kind!='requirements') or (implementation.exists().not() and software.exists().not())
# ShEx:

({ fhir:kind [fhir:v  . -'requirements']  }) OR ( NOT { fhir:implementation . } AND  NOT { fhir:software . })

) AND (

# Constraint UniqueKey:tcp-4
# Human readable:If kind = capability, implementation must be absent, software must be present

# Constraint: (kind != 'capability') or (implementation.exists().not() and software.exists())
# ShEx:

({ fhir:kind [fhir:v  . -'capability']  }) OR ( NOT { fhir:implementation . } AND {fhir:software .})

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# # Constraint UniqueKey:tcp-6
# Human readable:Each instance of the codeSystem element must represent a distinct code system.
#
# Constraint: codeSystem.uri.isDistinct()
# ShEx:
#
#   isDistinct  ( fhir:codeSystem.uri )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Implies
# Unmapped construct found: all
# # Constraint UniqueKey:tcp-1
# Human readable:If there is more than one version, a version code must be defined
#
# Constraint: version.count() > 1 implies version.all(code.exists())
# ShEx:
#
#(   count  ( fhir:version ) { fhir:v MinExclusive 1 } )  Implies  {fhir:version.  all  (code .)}
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: isDistinct
# # Constraint UniqueKey:tcp-7
# Human readable:Each version.code element must be distinct for a particular code system.
#
# Constraint: version.code.isDistinct()
# ShEx:
#
#   isDistinct  ( fhir:version.code )
{}

) AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: where
# # Constraint UniqueKey:tcp-8
# Human readable:A codeSystem element instance may have at most one version.isDefault element with a value of 'true'.
#
# Constraint: version.where(isDefault = true).count() <= 1
# ShEx:
#
#   count  ( fhir:version.  where  (isDefault { fhir:v [true] } ) ) { fhir:v MaxInclusive 1 } 
{}

)
 

# Information about the [ValueSet/$expand](valueset-operation-expand.html) operation
<TerminologyCapabilities.expansion> EXTENDS @<BackboneElement> CLOSED {   
    fhir:hierarchical @<boolean>?;          # Whether the server can return 
                                            # nested value sets 
    fhir:paging @<boolean>?;                # Whether the server supports paging 
                                            # on expansion 
    fhir:incomplete @<boolean>?;            # Allow request for incomplete 
                                            # expansions? 
    fhir:parameter @<OneOrMore_TerminologyCapabilities.expansion.parameter>?;  # Supported expansion parameter
    fhir:textFilter @<markdown>?;           # Documentation about text searching 
                                            # works 
}  

#---------------------- Cardinality Types (OneOrMore) -------------------

<OneOrMore_Identifier> CLOSED {
    rdf:first @<Identifier>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_Identifier> 
}

<OneOrMore_ContactDetail> CLOSED {
    rdf:first @<ContactDetail>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_ContactDetail> 
}

<OneOrMore_UsageContext> CLOSED {
    rdf:first @<UsageContext>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_UsageContext> 
}

<OneOrMore_CodeableConcept> CLOSED {
    rdf:first @<CodeableConcept>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_CodeableConcept> 
}

<OneOrMore_TerminologyCapabilities.codeSystem> CLOSED {
    rdf:first @<TerminologyCapabilities.codeSystem>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_TerminologyCapabilities.codeSystem> 
}

<OneOrMore_code> CLOSED {
    rdf:first @<code>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_code> 
}

<OneOrMore_TerminologyCapabilities.codeSystem.version.filter> CLOSED {
    rdf:first @<TerminologyCapabilities.codeSystem.version.filter>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_TerminologyCapabilities.codeSystem.version.filter> 
}

<OneOrMore_TerminologyCapabilities.codeSystem.version> CLOSED {
    rdf:first @<TerminologyCapabilities.codeSystem.version>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_TerminologyCapabilities.codeSystem.version> 
}

<OneOrMore_TerminologyCapabilities.expansion.parameter> CLOSED {
    rdf:first @<TerminologyCapabilities.expansion.parameter>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_TerminologyCapabilities.expansion.parameter> 
}

#---------------------- Value Sets ------------------------

# How a capability statement is intended to be used.
fhirvs:capability-statement-kind ["instance" "capability" "requirements"]

# The extent of the content of the code system (the concepts and codes it defines) are represented in a code system resource.
fhirvs:codesystem-content-mode ["not-present" "example" "fragment" "complete" "supplement"]

# The lifecycle status of an artifact.
fhirvs:publication-status ["draft" "active" "retired" "unknown"]

# This value set includes common codes from BCP-47 (http://tools.ietf.org/html/bcp47)
fhirvs:languages xsd:string #EXTERNAL

# The degree to which the server supports the code search parameter on ValueSet, if it is supported.
fhirvs:code-search-support ["in-compose" "in-expansion" "in-compose-or-expansion"]

